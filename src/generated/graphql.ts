/* eslint-disable */
// @ts-nocheck
// THIS FILE IS AUTOGENERATED DO NOT MODIFY BY HAND
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

/** Represents an access token for authentication. */
export type AccessToken = {
  __typename?: 'AccessToken';
  createdAt: Scalars['String']['output'];
  expiresAt: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  status: TokenStatus;
  token: Scalars['String']['output'];
  userId: Scalars['ID']['output'];
};

export enum AccountInteractionType {
  Block = 'BLOCK',
  Follow = 'FOLLOW',
  Unfollow = 'UNFOLLOW'
}

export enum AccountStateType {
  Active = 'ACTIVE',
  Deleted = 'DELETED',
  Inactive = 'INACTIVE',
  Suspended = 'SUSPENDED'
}

export enum AccountVisibilityType {
  Private = 'PRIVATE',
  Public = 'PUBLIC'
}

/** Represents an achievement in a particular game. */
export type Achievement = {
  __typename?: 'Achievement';
  dateAchieved: Scalars['DateTime']['output'];
  description: Scalars['String']['output'];
  game: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  title: Scalars['String']['output'];
};

/** Enum representing authentication modes. */
export enum AuthMode {
  Apple = 'APPLE',
  EmailPass = 'EMAIL_PASS',
  Facebook = 'FACEBOOK',
  Google = 'GOOGLE',
  PhonePass = 'PHONE_PASS'
}

/** Input for checking if a username is duplicate. */
export type CheckDuplicateUserInput = {
  username: Scalars['String']['input'];
};

/** Response for checking if a username is duplicate. */
export type CheckDuplicateUserResponse = {
  __typename?: 'CheckDuplicateUserResponse';
  isDuplicate: Scalars['Boolean']['output'];
};

export enum GenderType {
  Female = 'FEMALE',
  Male = 'MALE',
  PreferNotSay = 'PREFER_NOT_SAY'
}

export type GraphQlRequestBody = {
  operationName?: InputMaybe<Scalars['String']['input']>;
  query?: InputMaybe<Scalars['String']['input']>;
  variables?: InputMaybe<Scalars['JSON']['input']>;
};

/** Represents a highlight (e.g., screenshot, gameplay clip) in a user's profile. */
export type Highlight = {
  __typename?: 'Highlight';
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  mediaURL: Scalars['String']['output'];
  title: Scalars['String']['output'];
};

export enum MediaType {
  HighlightImage = 'HIGHLIGHT_IMAGE',
  HighlightVideo = 'HIGHLIGHT_VIDEO',
  ProfileBanner = 'PROFILE_BANNER',
  ProfilePicture = 'PROFILE_PICTURE'
}

export type MediaUploadResponse = ResponsePayload & {
  __typename?: 'MediaUploadResponse';
  context?: Maybe<Scalars['String']['output']>;
  fileUri?: Maybe<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /**
   * Sign in a user using email and password.
   * - `input`: Input data for signing in the user.
   */
  signIn?: Maybe<SignInResponse>;
  /**
   * Create a new user.
   *
   * - `input`: Input data for creating the new user.
   *   - `fullName`: Full name of the new user (required).
   *   - `username`: Unique username for the new user (required).
   *   - `phone`: Phone number for the new user (optional, required if `authMode` is `PHONE_PASS`).
   *   - `email`: Email address for the new user (optional, required if `authMode` is `EMAIL_PASS`, `GOOGLE`, `FACEBOOK`, or `APPLE`).
   *   - `password`: Password for the new user (optional, required if `authMode` is `EMAIL_PASS` or `PHONE_PASS`).
   *   - `authMode`: Authentication mode for creating the new user (required).
   *
   *   Authentication mode specifics:
   *   - If `authMode` is `EMAIL_PASS`:
   *     - Required fields: `email`, `password`, `username`, `fullName`, `authMode`.
   *   - If `authMode` is `PHONE_PASS`:
   *     - Required fields: `phone`, `password`, `username`, `fullName`, `authMode`.
   *   - If `authMode` is `GOOGLE`, `FACEBOOK`, or `APPLE`:
   *     - Required fields: `email`, `username`, `fullName`, `authMode`.
   */
  signUp: UserResponse;
  /**
   * Update an existing user.
   * - `input`: Input data for updating the user.
   */
  updateUser: UserResponse;
  updateUserConnection: UpdateUserConnectionResponse;
};


export type MutationSignInArgs = {
  input: SignInInput;
};


export type MutationSignUpArgs = {
  input: SignUpInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


export type MutationUpdateUserConnectionArgs = {
  input: UpdateUserConnectionInput;
};

export type Query = {
  __typename?: 'Query';
  /**
   * Check if a username is already taken.
   * - `input`: Input containing the username to check for duplication.
   */
  checkDuplicateUsername: CheckDuplicateUserResponse;
  /**
   * Retrieve a user by their username.
   * - `username`: Username of the user to retrieve.
   */
  user?: Maybe<User>;
  /** Retrieve a list of all users. */
  users?: Maybe<Array<User>>;
};


export type QueryCheckDuplicateUsernameArgs = {
  input: CheckDuplicateUserInput;
};


export type QueryUserArgs = {
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Interface for response payloads containing a success flag. */
export type ResponsePayload = {
  context?: Maybe<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
};

export type RestParamsInput = {
  __typename?: 'RestParamsInput';
  mediaType: MediaType;
  userId: Scalars['String']['output'];
};

/** Input for signing in a user with email and password. */
export type SignInInput = {
  authMode: AuthMode;
  email?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

/** Payload returned by sign-in mutation. */
export type SignInResponse = ResponsePayload & {
  __typename?: 'SignInResponse';
  context?: Maybe<Scalars['String']['output']>;
  success: Scalars['Boolean']['output'];
  token?: Maybe<Scalars['String']['output']>;
};

/** Input for creating a new user. */
export type SignUpInput = {
  authMode: AuthMode;
  birthday?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  fullName: Scalars['String']['input'];
  gender?: InputMaybe<GenderType>;
  password?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  username: Scalars['String']['input'];
};

/** Represents a skill in a particular game. */
export type Skill = {
  __typename?: 'Skill';
  game: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  skillType: Scalars['String']['output'];
  value: Scalars['Float']['output'];
};

/** Represents a team in the esports community. */
export type Team = {
  __typename?: 'Team';
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  members: Array<User>;
  name: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type TokenPayloadInput = {
  __typename?: 'TokenPayloadInput';
  createdAt: Scalars['String']['output'];
  id: Scalars['String']['output'];
};

/** Enum representing the status of an access token. */
export enum TokenStatus {
  Active = 'ACTIVE',
  Expired = 'EXPIRED'
}

export type UpdateUserConnectionInput = {
  actionType: AccountInteractionType;
  actor: Scalars['ID']['input'];
  target: Scalars['ID']['input'];
};

export type UpdateUserConnectionResponse = ResponsePayload & {
  __typename?: 'UpdateUserConnectionResponse';
  context: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
};

/** Input for updating an existing user. */
export type UpdateUserInput = {
  accountState?: InputMaybe<AccountStateType>;
  accountVisibility?: InputMaybe<AccountVisibilityType>;
  bio?: InputMaybe<Scalars['String']['input']>;
  birthday?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  gender?: InputMaybe<GenderType>;
  id: Scalars['String']['input'];
  password?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  profileBannerUri?: InputMaybe<Scalars['String']['input']>;
  profilePictureUri?: InputMaybe<Scalars['String']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
  verificationStatus?: InputMaybe<VerificationStatusType>;
};

/** Represents a user in the esports community. */
export type User = {
  __typename?: 'User';
  accountState: AccountStateType;
  accountVisibility: AccountVisibilityType;
  achievements?: Maybe<Array<Scalars['ID']['output']>>;
  authMode: AuthMode;
  bio?: Maybe<Scalars['String']['output']>;
  birthday?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  fullName: Scalars['String']['output'];
  gender?: Maybe<GenderType>;
  highlights?: Maybe<Array<Scalars['ID']['output']>>;
  id: Scalars['ID']['output'];
  password: Scalars['String']['output'];
  phone?: Maybe<Scalars['String']['output']>;
  preferredGames?: Maybe<Array<Scalars['ID']['output']>>;
  profileBanner?: Maybe<Scalars['String']['output']>;
  profilePicture?: Maybe<Scalars['String']['output']>;
  skills?: Maybe<Array<Scalars['ID']['output']>>;
  teams?: Maybe<Array<Scalars['ID']['output']>>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  username: Scalars['String']['output'];
  verificationStatus: VerificationStatusType;
};

export type UserInteraction = {
  __typename?: 'UserInteraction';
  actionType: AccountInteractionType;
  actor: Scalars['ID']['output'];
  createdAt: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  target: Scalars['ID']['output'];
  updatedAt: Scalars['String']['output'];
};

/** Payload returned by user-related mutations. */
export type UserResponse = ResponsePayload & {
  __typename?: 'UserResponse';
  context: Scalars['String']['output'];
  success: Scalars['Boolean']['output'];
  user?: Maybe<User>;
};

/** Enum representing verification status of users or professionals. */
export enum VerificationStatusType {
  Admin = 'ADMIN',
  UnverifiedCoach = 'UNVERIFIED_COACH',
  UnverifiedEsportsProfessional = 'UNVERIFIED_ESPORTS_PROFESSIONAL',
  UnverifiedPlayer = 'UNVERIFIED_PLAYER',
  VerifiedCoach = 'VERIFIED_COACH',
  VerifiedEsportsProfessional = 'VERIFIED_ESPORTS_PROFESSIONAL',
  VerifiedPlayer = 'VERIFIED_PLAYER'
}



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
export type ResolversInterfaceTypes<_RefType extends Record<string, unknown>> = {
  ResponsePayload: ( MediaUploadResponse ) | ( SignInResponse ) | ( UpdateUserConnectionResponse ) | ( UserResponse );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  AccessToken: ResolverTypeWrapper<AccessToken>;
  AccountInteractionType: AccountInteractionType;
  AccountStateType: AccountStateType;
  AccountVisibilityType: AccountVisibilityType;
  Achievement: ResolverTypeWrapper<Achievement>;
  AuthMode: AuthMode;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  CheckDuplicateUserInput: CheckDuplicateUserInput;
  CheckDuplicateUserResponse: ResolverTypeWrapper<CheckDuplicateUserResponse>;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']['output']>;
  Float: ResolverTypeWrapper<Scalars['Float']['output']>;
  GenderType: GenderType;
  GraphQLRequestBody: GraphQlRequestBody;
  Highlight: ResolverTypeWrapper<Highlight>;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  JSON: ResolverTypeWrapper<Scalars['JSON']['output']>;
  MediaType: MediaType;
  MediaUploadResponse: ResolverTypeWrapper<MediaUploadResponse>;
  Mutation: ResolverTypeWrapper<{}>;
  Query: ResolverTypeWrapper<{}>;
  ResponsePayload: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['ResponsePayload']>;
  RestParamsInput: ResolverTypeWrapper<RestParamsInput>;
  SignInInput: SignInInput;
  SignInResponse: ResolverTypeWrapper<SignInResponse>;
  SignUpInput: SignUpInput;
  Skill: ResolverTypeWrapper<Skill>;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  Team: ResolverTypeWrapper<Team>;
  TokenPayloadInput: ResolverTypeWrapper<TokenPayloadInput>;
  TokenStatus: TokenStatus;
  UpdateUserConnectionInput: UpdateUserConnectionInput;
  UpdateUserConnectionResponse: ResolverTypeWrapper<UpdateUserConnectionResponse>;
  UpdateUserInput: UpdateUserInput;
  User: ResolverTypeWrapper<User>;
  UserInteraction: ResolverTypeWrapper<UserInteraction>;
  UserResponse: ResolverTypeWrapper<UserResponse>;
  VerificationStatusType: VerificationStatusType;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  AccessToken: AccessToken;
  Achievement: Achievement;
  Boolean: Scalars['Boolean']['output'];
  CheckDuplicateUserInput: CheckDuplicateUserInput;
  CheckDuplicateUserResponse: CheckDuplicateUserResponse;
  DateTime: Scalars['DateTime']['output'];
  Float: Scalars['Float']['output'];
  GraphQLRequestBody: GraphQlRequestBody;
  Highlight: Highlight;
  ID: Scalars['ID']['output'];
  JSON: Scalars['JSON']['output'];
  MediaUploadResponse: MediaUploadResponse;
  Mutation: {};
  Query: {};
  ResponsePayload: ResolversInterfaceTypes<ResolversParentTypes>['ResponsePayload'];
  RestParamsInput: RestParamsInput;
  SignInInput: SignInInput;
  SignInResponse: SignInResponse;
  SignUpInput: SignUpInput;
  Skill: Skill;
  String: Scalars['String']['output'];
  Team: Team;
  TokenPayloadInput: TokenPayloadInput;
  UpdateUserConnectionInput: UpdateUserConnectionInput;
  UpdateUserConnectionResponse: UpdateUserConnectionResponse;
  UpdateUserInput: UpdateUserInput;
  User: User;
  UserInteraction: UserInteraction;
  UserResponse: UserResponse;
};

export type AccessTokenResolvers<ContextType = any, ParentType extends ResolversParentTypes['AccessToken'] = ResolversParentTypes['AccessToken']> = {
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  expiresAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['TokenStatus'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AchievementResolvers<ContextType = any, ParentType extends ResolversParentTypes['Achievement'] = ResolversParentTypes['Achievement']> = {
  dateAchieved?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  game?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CheckDuplicateUserResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CheckDuplicateUserResponse'] = ResolversParentTypes['CheckDuplicateUserResponse']> = {
  isDuplicate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type HighlightResolvers<ContextType = any, ParentType extends ResolversParentTypes['Highlight'] = ResolversParentTypes['Highlight']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  mediaURL?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON';
}

export type MediaUploadResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaUploadResponse'] = ResolversParentTypes['MediaUploadResponse']> = {
  context?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fileUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  signIn?: Resolver<Maybe<ResolversTypes['SignInResponse']>, ParentType, ContextType, RequireFields<MutationSignInArgs, 'input'>>;
  signUp?: Resolver<ResolversTypes['UserResponse'], ParentType, ContextType, RequireFields<MutationSignUpArgs, 'input'>>;
  updateUser?: Resolver<ResolversTypes['UserResponse'], ParentType, ContextType, RequireFields<MutationUpdateUserArgs, 'input'>>;
  updateUserConnection?: Resolver<ResolversTypes['UpdateUserConnectionResponse'], ParentType, ContextType, RequireFields<MutationUpdateUserConnectionArgs, 'input'>>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  checkDuplicateUsername?: Resolver<ResolversTypes['CheckDuplicateUserResponse'], ParentType, ContextType, RequireFields<QueryCheckDuplicateUsernameArgs, 'input'>>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<QueryUserArgs>>;
  users?: Resolver<Maybe<Array<ResolversTypes['User']>>, ParentType, ContextType>;
};

export type ResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['ResponsePayload'] = ResolversParentTypes['ResponsePayload']> = {
  __resolveType: TypeResolveFn<'MediaUploadResponse' | 'SignInResponse' | 'UpdateUserConnectionResponse' | 'UserResponse', ParentType, ContextType>;
  context?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
};

export type RestParamsInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['RestParamsInput'] = ResolversParentTypes['RestParamsInput']> = {
  mediaType?: Resolver<ResolversTypes['MediaType'], ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SignInResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['SignInResponse'] = ResolversParentTypes['SignInResponse']> = {
  context?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SkillResolvers<ContextType = any, ParentType extends ResolversParentTypes['Skill'] = ResolversParentTypes['Skill']> = {
  game?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  skillType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TeamResolvers<ContextType = any, ParentType extends ResolversParentTypes['Team'] = ResolversParentTypes['Team']> = {
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  members?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TokenPayloadInputResolvers<ContextType = any, ParentType extends ResolversParentTypes['TokenPayloadInput'] = ResolversParentTypes['TokenPayloadInput']> = {
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateUserConnectionResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateUserConnectionResponse'] = ResolversParentTypes['UpdateUserConnectionResponse']> = {
  context?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  accountState?: Resolver<ResolversTypes['AccountStateType'], ParentType, ContextType>;
  accountVisibility?: Resolver<ResolversTypes['AccountVisibilityType'], ParentType, ContextType>;
  achievements?: Resolver<Maybe<Array<ResolversTypes['ID']>>, ParentType, ContextType>;
  authMode?: Resolver<ResolversTypes['AuthMode'], ParentType, ContextType>;
  bio?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  birthday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['GenderType']>, ParentType, ContextType>;
  highlights?: Resolver<Maybe<Array<ResolversTypes['ID']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  password?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredGames?: Resolver<Maybe<Array<ResolversTypes['ID']>>, ParentType, ContextType>;
  profileBanner?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  profilePicture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  skills?: Resolver<Maybe<Array<ResolversTypes['ID']>>, ParentType, ContextType>;
  teams?: Resolver<Maybe<Array<ResolversTypes['ID']>>, ParentType, ContextType>;
  updatedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  verificationStatus?: Resolver<ResolversTypes['VerificationStatusType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserInteractionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserInteraction'] = ResolversParentTypes['UserInteraction']> = {
  actionType?: Resolver<ResolversTypes['AccountInteractionType'], ParentType, ContextType>;
  actor?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  target?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserResponse'] = ResolversParentTypes['UserResponse']> = {
  context?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  AccessToken?: AccessTokenResolvers<ContextType>;
  Achievement?: AchievementResolvers<ContextType>;
  CheckDuplicateUserResponse?: CheckDuplicateUserResponseResolvers<ContextType>;
  DateTime?: GraphQLScalarType;
  Highlight?: HighlightResolvers<ContextType>;
  JSON?: GraphQLScalarType;
  MediaUploadResponse?: MediaUploadResponseResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  ResponsePayload?: ResponsePayloadResolvers<ContextType>;
  RestParamsInput?: RestParamsInputResolvers<ContextType>;
  SignInResponse?: SignInResponseResolvers<ContextType>;
  Skill?: SkillResolvers<ContextType>;
  Team?: TeamResolvers<ContextType>;
  TokenPayloadInput?: TokenPayloadInputResolvers<ContextType>;
  UpdateUserConnectionResponse?: UpdateUserConnectionResponseResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserInteraction?: UserInteractionResolvers<ContextType>;
  UserResponse?: UserResponseResolvers<ContextType>;
};

